# App Configuration file
# The target messaging could be one of Kafka, RabbitMQ or IBMMQ or comma separated list
app.target.messaging=Kafka,RabbitMQ,IBMMQ
app.name=StoreSimulator
app.version=0.0.4
quarkus.http.port=8080
#quarkus.ssl.native=true
quarkus.swagger-ui.always-include=true
quarkus.openshift.expose=true
quarkus.openshift.env.configmaps=store-simulator-cm
# quarkus.kubernetes.deployment-target=knative
quarkus.http.test-port=8083
quarkus.http.test-ssl-port=8446
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n


# IBM MQ settings
mq.host=localhost
mq.port=1414
mq.channel=DEV.APP.SVRCONN
mq.qmgr=QM1
mq.app_user=app
mq.app_password=passw0rd
mq.queue_name=DEV.QUEUE.1

# Rabbit MQ settings
amqp.host=localhost
amqp.port=5672
amqp.username=rabbit-user
amqp.password=rabbit-pass
amqp.virtualHost=/
amqp.queue=items

kafka.topic.name=items
%dev.kafka.bootstrap.servers=localhost:9092
kafka.producer.timeout.sec=2
kafka.producer.acks=1
kafka.producer.idempotence=false
# local kafka:
%dev.kafka.sasl.mechanism=PLAIN
# kafka.security.protocol="SASL_SSL"
#kafka.security.protocol=
#kafka.sasl.jaas.config=

# kafka.sasl.mechanism=PLAIN
# kafka.sasl.jaas.config="org.apache.kafka.common.security.plain.PlainLoginModule required username=\"token\" password="+${KAFKA_APIKEY} + ") \";"
# kafka.sasl.mechanism=SCRAM-SHA-512
# kafka.sasl.jaas.config="org.apache.kafka.common.security.scram.ScramLoginModule required \"username=\"<scram_username>\" password=\"<scram_password>\";"

# Mutual auth properties
# kafka.sasl.mechanism=SSL
#kafka.ssl.keystore.file.location=
#kafka.ssl.keystore.password=

# TLS Properties
#kafka.ssl.protocol=
#kafka.ssl.trutstore.file.location=
#kafka.ssl.trutstore.password=

## OpenShift - Kafka
quarkus.openshift.env.vars.KAFKA_BROKERS=light-es-kafka-bootstrap.integration.svc:9093

quarkus.openshift.env.vars.KAFKA_CERT_PATH=/deployments/certs/server/ca.p12
quarkus.openshift.mounts.es-cert.path=/deployments/certs/server
quarkus.openshift.secret-volumes.es-cert.secret-name=light-es-cluster-ca-cert
quarkus.openshift.secret-volumes.es-cert.optional=true

quarkus.openshift.env.mapping.KAFKA_CERT_PWD.from-secret=light-es-cluster-ca-cert
quarkus.openshift.env.mapping.KAFKA_CERT_PWD.with-key=ca.password

quarkus.openshift.env.vars.USER_CERT_PATH=/deployments/certs/user/user.p12
quarkus.openshift.mounts.user-cert.path=/deployments/certs/user
quarkus.openshift.secret-volumes.user-cert.secret-name=es-tls-user
quarkus.openshift.secret-volumes.user-cert.optional=true

quarkus.openshift.env.mapping.USER_CERT_PWD.from-secret=es-tls-user
quarkus.openshift.env.mapping.USER_CERT_PWD.with-key=user.password

quarkus.openshift.env.mapping.KAFKA_PASSWORD.from-secret=es-tls-user
quarkus.openshift.env.mapping.KAFKA_PASSWORD.with-key=user.password

## OpenShift - MQ
quarkus.openshift.env.vars.MQ_CCDT_CONFIG_PATH=/deployments/certs/mq-ccdt/mq-ccdt.json
quarkus.openshift.mounts.mq-ccdt-config.path=/deployments/certs/mq-ccdt
quarkus.openshift.config-map-volumes.mq-ccdt-config.config-map-name=mq-ccdt-config
quarkus.openshift.config-map-volumes.mq-ccdt-config.optional=true

quarkus.openshift.env.vars.MQ_CIPHER_SUITE=TLS12ORHIGHER

# NEEDS TO BE SET VIA -Djava.net.ssl.trustStore* PROPERTIES ONLY FOR JMS
# quarkus.openshift.env.vars.MQ_TLS_CERT_PATH=/deployments/certs/mq-tls/mq-tls.jks
quarkus.openshift.mounts.mq-tls-truststore.path=/deployments/certs/mq-tls
quarkus.openshift.secret-volumes.mq-tls-truststore.secret-name=store-simulator-mq-truststore
quarkus.openshift.secret-volumes.mq-tls-truststore.optional=true

quarkus.openshift.expose=true


mp.messaging.outgoing.amqp-items.connector=smallrye-amqp
mp.messaging.outgoing.amqp-items.topic=items
mp.messaging.outgoing.amqp-items.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.amqp-items.value.serializer=io.quarkus.kafka.client.serialization.JsonbSerializer
mp.messaging.outgoing.amqp-items.waitForWriteCompletion=true
